{"version":3,"sources":["./src/app/init-game-state.ts","./src/environments/environment.ts","./src/app/starter/starter.component.ts","./src/app/starter/starter.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/game-state.service.ts","./src/app/app.module.ts","./src/app/help/help.component.ts","./src/app/help/help.component.html","./src/app/game/game.component.ts","./src/app/game/game.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { GameState } from './game-state';\n\nexport const GAME_STATE: GameState = {\n    // Game Setting\n    size: 10,\n    numOfPlayers: 4,\n\n    // Game Status\n    gameEnded: false,\n    canRetract: false,\n    turn: 1,\n    learningMode: false,\n    tiles: [],\n    availableMoves: 10*10,\n\n    // For retract function\n    preMoveTile: null,\n    // Save tile's coordinates which the tile's isValid property is updated (to be valid)\n    updatedIsValidTiles: []\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { GameState } from '../game-state';\nimport { GameStateService } from '../game-state.service';\n\n@Component({\n  selector: 'app-starter',\n  templateUrl: './starter.component.html',\n  styleUrls: ['./starter.component.scss']\n})\n\nexport class StarterComponent implements OnInit {\n  sizeOptions: number[] = [...Array(5).keys()].map(x => x+=8)\n  numOfPlayersOptions: number[] = [...Array(5).keys()].map(x => x += 2)\n\n  gameState: GameState\n\n  \n  constructor(private router: Router,\n              private gameStateService: GameStateService) { }\n\n  ngOnInit() {\n    this.getGameState()\n  }\n\n  getGameState(): void {\n    this.gameStateService.getGameState()\n      .subscribe(gameState => this.gameState = gameState)\n  }\n  \n  onChooseSize(size: number) {\n    this.gameState.size = size\n  }\n\n  onChooseNumOfPlayers(numOfPlayers: number) {\n    this.gameState.numOfPlayers = numOfPlayers\n  }\n\n  initGameState() {\n    this.gameState.gameEnded = false\n    this.gameState.canRetract = false\n    this.gameState.turn = 1\n    this.gameState.tiles = []\n    this.gameState.availableMoves = this.gameState.size * this.gameState.size\n    this.gameState.preMoveTile = null\n    this.gameState.updatedIsValidTiles = []\n    // only leraning mode setting is kept\n  }\n\n  onNewGame() {\n    this.initGameState()\n    this.router.navigate(['/game'])\n  }\n}\n","<h1>4Gravity</h1>\n<section class=\"newGame\">\n    <div class=\"grid-x grid-padding-x\">\n        <div class=\"logo\">\n            <div class=\"tile\"></div>\n            <div class=\"tile\"></div>\n            <div class=\"tile\"></div>\n            <div class=\"tile\"></div>\n            <div class=\"tile\"></div>\n            <div class=\"tile\"></div>\n        </div>\n    </div>\n    <div class=\"grid-x grid-padding-x\">\n        <div class=\"cell\">\n            <section class=\"setting\">\n                <div class=\"options-text\">Size of the board:</div>\n                <div class=\"size options grid-x grid-margin-x\">\n                    <div class=\"cell auto square\"\n                        *ngFor=\"let sizeOption of sizeOptions\" \n                        [ngClass]=\"{'selected': sizeOption == gameState.size}\"\n                        (click)=\"onChooseSize(sizeOption)\">\n                        <div class=\"option\"><span>{{ sizeOption }}x{{ sizeOption }}</span></div>\n                    </div>\n                </div>\n            </section>\n            <section class=\"setting\">\n                <div class=\"options-te t\">Number of Players:</div>\n                <div class=\"numOfPlayer options grid-x grid-margin-x\">\n                    <div class=\"cell auto square\" \n                        *ngFor=\"let numOfPlayersOption of numOfPlayersOptions\" \n                        [ngClass]=\"{selected: numOfPlayersOption == gameState.numOfPlayers}\"\n                        (click)=\"onChooseNumOfPlayers(numOfPlayersOption)\">\n                        <div class=\"option\"><span>{{ numOfPlayersOption }}</span></div>\n                    </div>\n                </div>\n            </section>\n            <div class=\"button new_game\" (click)=\"onNewGame()\">New Game</div>\n        </div>\n    </div>\n</section>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'four-gravity';\n}\n","<router-outlet></router-outlet>","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { GameState } from './game-state';\nimport { GAME_STATE } from './init-game-state';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameStateService {\n\n  constructor() { }\n\n  getGameState(): Observable<GameState> {\n    return of(GAME_STATE)\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { StarterComponent } from './starter/starter.component';\nimport { GameComponent } from './game/game.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HelpComponent } from './help/help.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    StarterComponent,\n    GameComponent,\n    HelpComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-help',\n  templateUrl: './help.component.html',\n  styleUrls: ['./help.component.scss']\n})\nexport class HelpComponent implements OnInit {\n\n  constructor(private location: Location) { }\n\n  ngOnInit() {\n  }\n\n  onGoBack() {\n    this.location.back()\n  }\n}\n","<section class=\"howToPlay\">\n    <div class=\"grid-x grid-padding-x\">\n        <div class=\"cell\">\n            <h2>How to Play</h2>\n            <p>Welcome to the world with four directions of gravity! 4Gravity is a multiplayer game. 3-4 players are\n                recommended. First player to form a horizontal, vertical, or diagonal <strong>line of four\n                    tiles</strong> to win. You can only put a tile that is <strong>supported by at least one\n                    side</strong> of the grid. Tap on a tile to make a move!\n            </p>\n\n            <strong>Tips:</strong>\n            <ul>\n                <li>Turn on Learning Mode to view the available moves!</li>\n                <li>If you have a false move, tap on the \"Retract\" button to retract your move.</li>\n            </ul>\n\n            <div class=\"button\" (click)=\"onGoBack()\">Back</div>\n        </div>\n    </div>\n</section>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Tile } from '../tile';\n\nimport { GameState } from '../game-state';\nimport { GameStateService } from '../game-state.service';\n\nimport Swal from 'sweetalert2';\n\nclass Coordinate {\n  r: number;\n  c: number;\n}\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.scss']\n})\n\nexport class GameComponent implements OnInit {\n  PLAYER_NAME: string[] = [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\", \"Purple\"]\n  FOUR: number = 4\n\n  gameState: GameState\n\n  constructor(private router: Router,\n              private gameStateService: GameStateService) { }\n\n\n  ngOnInit() {\n    // Get gameState\n    this.getGameState()\n    if (this.gameState.tiles.length == 0) {\n      const EDGE_INDICES = [0, this.gameState.size - 1]\n      for (let i of Array(this.gameState.size).keys()) {\n        let row = []\n        for (let j of Array(this.gameState.size).keys()) {\n          let tile: Tile = {\n            r: i,\n            c: j,\n            player: 0,\n            isValid: EDGE_INDICES.includes(i) || EDGE_INDICES.includes(j),\n            isPartOfWinStreak: false,\n          }\n          row.push(tile)\n        }\n        this.gameState.tiles.push(row)\n      }\n      console.log(this.gameState.tiles)\n    }\n  }\n\n  getGameState(): void {\n    this.gameStateService.getGameState()\n      .subscribe(gameState => this.gameState = gameState)\n  }\n\n  static clone(arr) {\n    let newArray = []\n    arr.forEach((row, index) => {\n      newArray.push(row.slice())\n    })\n    return newArray\n  }\n\n  setTileClasses(tile) {\n    let classes = {}\n    classes['valid'] = tile.isValid\n    classes['wonStreak'] = tile.isPartOfWinStreak\n    let playerStr = 'player' + tile.player\n    classes[playerStr] = true\n    return classes\n  }\n\n  trackByFn(index: number, status: number[][]) {\n    return status[index]\n  }\n\n\n  nextTurn(turn: number) {\n    turn += 1\n    if (turn > this.gameState.numOfPlayers)\n      turn = 1\n    return turn\n  }\n\n  preTurn(turn: number) {\n    turn -= 1\n    if (turn <= 0)\n      turn = this.gameState.numOfPlayers\n    return turn\n  }\n\n  isOutOfBound(n: number) {\n    return (n < 0) || (n >= this.gameState.size)\n  }\n\n  updateIsValid(tile: Tile) {\n    tile.isValid = false\n    let end: number = this.gameState.size - 1\n    let rowPositions: number[] = [0, end, tile.r, tile.r]\n    let colPositions: number[] = [tile.c, tile.c, 0, end]\n    let rowOperators: number[] = [+1, -1, 0, 0]\n    let colOperators: number[] = [0, 0, +1, -1]\n    for (let i of Array(4).keys()) {\n      let row: number = rowPositions[i]\n      let col: number = colPositions[i]\n      let rowOptr: number = rowOperators[i]\n      let colOptr: number = colOperators[i]\n      for (let _ of Array(this.gameState.size)) {\n        let curTile: Tile = this.gameState.tiles[row][col]\n        if (curTile.player == 0) {\n          if (curTile.isValid == true) {\n            break\n          } else {\n            curTile.isValid = true\n            this.gameState.updatedIsValidTiles.push(curTile)\n            break\n          }\n        }\n        row += rowOptr\n        col += colOptr\n      }\n    }\n  }\n\n  checkWinCondition(tile: Tile) {\n    // left to right\n    // top to bottom\n    // top left to bottom right\n    // top right to bottom left\n    let hasWon = false\n    let rowPositions: number[] = [tile.r, tile.r-3, tile.r-3, tile.r-3]\n    let colPositions: number[] = [tile.c-3, tile.c, tile.c-3, tile.c+3]\n    let rowOperators: number[] = [0, +1, +1, +1]\n    let colOperators: number[] = [+1, 0, +1, -1]\n    for (let i of Array(4).keys()) {\n      let row: number = rowPositions[i]\n      let col: number = colPositions[i]\n      let rowOptr: number = rowOperators[i]\n      let colOptr: number = colOperators[i]\n      let count: number = 0\n      let streakIndices: Coordinate[] = []\n      for (let _ of Array(7)) {\n        if (!this.isOutOfBound(row) && !this.isOutOfBound(col)) {\n          if (this.gameState.tiles[row][col].player != tile.player) {\n            count = 0\n            if (streakIndices.length < this.FOUR)\n              streakIndices = [] \n          } else {\n            count += 1\n            streakIndices.push({\n              r: row,\n              c: col\n            })\n          }\n          if (count == this.FOUR) {\n            hasWon = true\n          }\n        }\n        row += rowOptr\n        col += colOptr\n      }\n      if (streakIndices.length >= this.FOUR) {\n        for (let streakIndex of streakIndices) {\n          this.gameState.tiles[streakIndex.r][streakIndex.c].isPartOfWinStreak = true\n        }\n      }\n    }\n    return hasWon\n  }\n\n  onLearningMode(): void {\n    this.gameState.learningMode = !this.gameState.learningMode\n  }\n\n  onMove(tile: Tile) {\n    if (this.gameState.gameEnded) {\n      return\n    }\n    if (tile.isValid) {\n      // For retract\n      this.gameState.preMoveTile = tile\n      this.gameState.updatedIsValidTiles = []\n      this.gameState.canRetract = true\n      this.gameState.availableMoves -= 1\n      tile.player = this.gameState.turn\n      this.updateIsValid(tile)\n      let hasWon: boolean = this.checkWinCondition(tile)\n      if (hasWon) {\n        console.log(tile.player + \" won!\")\n        Swal.fire({\n          title: \"Congratulations!\",\n          text: this.PLAYER_NAME[this.gameState.turn - 1] + \" won the game!\",\n        })\n        this.gameState.gameEnded = true\n        this.gameState.canRetract = false\n      }\n      this.gameState.turn = this.nextTurn(this.gameState.turn)\n\n      // Check if the board is full\n      if (this.gameState.availableMoves == 0) {\n        this.gameState.gameEnded = true\n        this.gameState.canRetract = false\n        Swal.fire({\n          title: \"Draw!\",\n          icon: \"info\",\n          showCancelButton: true,\n          confirmButtonText: \"Start a new game!\",\n          cancelButtonText: \"Close\"\n        })\n        .then((result) => {\n          if (result.isConfirmed)\n            this.onNewGame()\n        })\n      }\n    }\n  }\n\n  onRetract() {\n    this.gameState.canRetract = false\n    this.gameState.availableMoves += 1\n    this.gameState.turn = this.preTurn(this.gameState.turn)\n    for (let tile of this.gameState.updatedIsValidTiles) {\n      tile.isValid = false\n    }\n    this.gameState.preMoveTile.isValid = true\n    this.gameState.preMoveTile.player = 0\n  }\n\n  onNewGame() {\n    if (this.gameState.gameEnded) {\n      this.router.navigate(['/start'])\n    }\n    else {\n      Swal.fire({\n        title: \"Are you sure to start a new game?\",\n        text: \"You will not be able to recover the game progress!\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: \"Yes, start a new game!\",\n        cancelButtonText: \"Cancel\"\n      })\n      .then((result) => {\n        if (result.isConfirmed) {\n          this.router.navigate(['/start'])\n        }\n      })\n    }\n  }\n}\n","<section class=\"game\">\n    <div class=\"grid-x grid-padding-x\">\n        <div class=\"large-6 medium-6 small-6 cell\">\n            <div class=\"turn\">Turn: \n                <div id=\"player_color\" \n                    [ngClass]=\"'player' + gameState.turn\">\n                </div> \n                <span class=\"name\"></span>\n            </div>\n        </div>\n        <div class=\"large-6 medium-6 small-6 cell\">\n            <a id=\"retract\" \n                [hidden]=\"!gameState.canRetract\"\n                [ngClass]=\"'player' + preTurn(gameState.turn)\"\n                (click)=\"onRetract()\">\n                Retract\n            </a>\n        </div>\n    </div>\n    <div class=\"grid-x grid-padding-x\">\n        <div class=\"cell\">\n            <div #wrapper class=\"wrapper square\" [ngClass]=\"{'learningMode': gameState.learningMode}\">\n                <div class=\"grid-y\">\n                    <div class=\"cell auto\" *ngFor=\"let row of gameState.tiles;\">\n                        <div class=\"grid-x gird-y\" style=\"height: 100%;\">\n                            <div *ngFor=\"let tile of row;\" \n                                (click)=\"onMove(tile)\"\n                                [ngClass]=\"setTileClasses(tile)\"\n                                ngCloak\n                                class=\"check cell auto\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n\n\n<div class=\"grid-x grid-padding-x grid-padding-y\">\n    <div class=\"cell large-auto medium-auto\">\n        <div class=\"button pink_button\" \n            id=\"learning_mode\" \n            [ngClass]=\"{'checked': gameState.learningMode}\"\n            (click)=\"onLearningMode()\">\n            Learning Mode: {{ gameState.learningMode ? \"On\" : \"Off\" }}\n        </div>\n    </div>\n    <div class=\"cell large-auto medium-auto\">\n        <div routerLink=\"/how-to-play\" class=\"button\">How to Play</div>\n    </div>\n</div>\n\n<div class=\"grid-x grid-padding-x grid-padding-y\">\n    <div class=\"cell large-auto medium-auto\">\n        <div class=\"button transparent\" (click)=\"onNewGame()\">New Game</div>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { GameComponent } from './game/game.component';\r\nimport { HelpComponent } from './help/help.component';\r\nimport { StarterComponent } from './starter/starter.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/start', pathMatch: 'full' },\r\n  { path: 'start', component: StarterComponent },\r\n  { path: 'game', component: GameComponent },\r\n  { path: 'how-to-play', component: HelpComponent },\r\n];\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { useHash: true, relativeLinkResolution: 'legacy' })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}